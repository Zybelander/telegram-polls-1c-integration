
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Не СтатусОпроса = Перечисления.СтатусОпроса.ПланируетсяКСозданию Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;	
			
	// регистр ПланировкаРасписанияTEST
	Движения.ПланировкаРасписанияTEST.Записывать = Истина;
	Для Каждого ТекСтрокаПланируемыеВыходы Из ПланируемыеВыходы Цикл
		//Инициируем процедуру создания отдельного документа со службой
		//Документы.РАСПИСАНИЕ_Записавшиеся_TEST
		
		//Для сложения даты и времени(с нулевой датой) переводим время в секунды
		ВсегоЧасов_ВСекундах = Час(ТекСтрокаПланируемыеВыходы.ВремяСлужбы) * 60 * 60;
		ВсегоМинут_ВСекундах = Минута(ТекСтрокаПланируемыеВыходы.ВремяСлужбы) * 60;
		ВремяСлужбыДляДока_ВСекундах = ВсегоЧасов_ВСекундах + ВсегоМинут_ВСекундах;
		
		//Дата службы, которую передаем в документ
		ДатаДокумента = ТекСтрокаПланируемыеВыходы.ДатаСлужбы + ВремяСлужбыДляДока_ВСекундах; 
		//Разрез - ссылка на справочник, нам нужен реквизит с Наименованием разреза - он является строкой
		ПредставлениеРазреза = ТекСтрокаПланируемыеВыходы.Разрез.Наименование;   
		//В реквизите "Наименование" создаваемого документа хранится поле с представлением службы в опросе
		ПредставлениеСлужбы = Серверный.ПолучитьПредставлениеСлужбы(ТекСтрокаПланируемыеВыходы.ДеньНедели, 
																	ПредставлениеРазреза, 
																	ТекСтрокаПланируемыеВыходы.ДатаСлужбы, 
																	ТекСтрокаПланируемыеВыходы.ВремяСлужбы);   
		//Получаем ссылку на созданный нами документ															
		СсылкаНаСлужбу = Документы.РАСПИСАНИЕ_Записавшиеся_TEST.СоздатьДокИзПлана(ДатаДокумента, ПредставлениеСлужбы);
		
		//ФормируемДвиженияДокумента
		Движение = Движения.ПланировкаРасписанияTEST.Добавить();
		Движение.Период = Дата; 
		Движение.ШапкаОпроса = ИдентификаторНедели;
		Движение.ДатаСлужбы = ТекСтрокаПланируемыеВыходы.ДатаСлужбы;
		Движение.ВремяСлужбы = ТекСтрокаПланируемыеВыходы.ВремяСлужбы;
		Движение.ДеньНедели = ТекСтрокаПланируемыеВыходы.ДеньНедели;
		Движение.Разрез = ТекСтрокаПланируемыеВыходы.Разрез;    
		Движение.ДокументВыхода = СсылкаНаСлужбу;
	КонецЦикла;
	
	Движения.Записать();
	Если СтатусОпроса = Перечисления.СтатусОпроса.ПланируетсяКСозданию Тогда
		СтатусОпроса = Перечисления.СтатусОпроса.ГотовКВыгрузкеОпроса;
		Записать();
	КонецЕсли;
	
КонецПроцедуры   

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПланируемыеВыходы.Количество() = 0 И ИдентификаторНедели = "" Тогда
		Для Каждого СтрокаТЧ Из ПланируемыеВыходы Цикл
	    	НачалоПланируемойНедели = НачалоНедели(СтрокаТЧ.ДатаСлужбы);
			Прервать;
		КонецЦикла;
		КонецПланируемойНедели = КонецНедели(НачалоПланируемойНедели);
		ИдентификаторНедели = Серверный.ПолучитьТекстШапкиОпроса(НачалоПланируемойНедели, КонецПланируемойНедели);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если НЕ СтатусОпроса = Перечисления.СтатусОпроса.ПланируетсяКСозданию Тогда
		Отказ = Истина;
		Сообщить("Нельзя отменить проведение у данного документа.");
		Возврат
	КонецЕсли;	
	
	//Удаляем все документы служб недели
	Для Каждого Служба Из ПланируемыеВыходы Цикл
		//Переводим Время документа в секунды для сложения с датой
		ВсегоЧасов_ВСекундах = Час(Служба.ВремяСлужбы) * 60 * 60;
		ВсегоМинут_ВСекундах = Минута(Служба.ВремяСлужбы) * 60;
		ВремяСлужбыДляДока_ВСекундах = ВсегоЧасов_ВСекундах + ВсегоМинут_ВСекундах;
		
		ДатаДока = Служба.ДатаСлужбы + ВремяСлужбыДляДока_ВСекундах;
		НомерДока = Серверный.ПолучитьНомерДокумента(ДатаДока);  
		СсылкаНаДок = Документы.РАСПИСАНИЕ_Записавшиеся_TEST.НайтиПоНомеру(НомерДока);  
		Если Не СсылкаНаДок.Пустая() Тогда
			СсылкаНаДок.ПолучитьОбъект().Удалить();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры



