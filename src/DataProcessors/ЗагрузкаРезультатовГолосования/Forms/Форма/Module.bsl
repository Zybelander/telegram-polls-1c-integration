
#Область СлужебныеПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	//Инициирует запись в реквизит токен бота, создающего опрос и ID чата
	ТокенИнициатора = "Ввести_Сюда_Токен_Телеграм_Бота";
	chat_id = "Ввести_Сюда_ID_Чата";
КонецПроцедуры

&НаСервере
Процедура РегистраторПриИзмененииНаСервере()
	ИмяПолучаемогоФайла = Формат(Регистратор.ДатаСозданияОпроса, "ДФ=ггггММдд_ЧЧммсс");	
КонецПроцедуры

&НаКлиенте
Процедура РегистраторПриИзменении(Элемент)
	РегистраторПриИзмененииНаСервере();
КонецПроцедуры    

#КонецОбласти

#Область Инструменты

&НаСервере
Функция ФайлJsonВСтруктуру(Знач ПутьКФайлу, Знач Кодировка = "utf-8") Экспорт
	ПотокИтоговыхДанных = Новый ФайловыйПоток(ПутьКФайлу, РежимОткрытияФайла.Открыть);
	
	ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.ОткрытьПоток(ПотокИтоговыхДанных);
    
    Данные = ПрочитатьJSON(ЧтениеJSON, Ложь, Неопределено, ФорматДатыJSON.ISO);
    ЧтениеJSON.Закрыть();
	ПотокИтоговыхДанных.Закрыть();
    
    Возврат Данные;
		
КонецФункции      

&НаСервере
Функция ПолучитьПользователяПоID(IDПользователя)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИмяПользователяИID_В_TG.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ИмяПользователяИID_В_TG КАК ИмяПользователяИID_В_TG
		|ГДЕ
		|	ИмяПользователяИID_В_TG.IDПользователя = &IDПользователя";
	
	Запрос.УстановитьПараметр("IDПользователя", Число(IDПользователя));
	//Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СсылкаНаПользователя = Выборка.Пользователь;
	КонецЦикла;
	
	Пользователь = СсылкаНаПользователя.ПолучитьОбъект();
	
	Возврат СсылкаНаПользователя;	
КонецФункции // ПолучитьПользователяПоID()

&НаСервере
Функция ПолучитьМассивСлужбРегистратора()
	//Получаем массив всех документов служб для данного регистратора в порядке возрастания
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланировкаРасписанияTEST.ДокументВыхода.Ссылка КАК ДокументВыходаСсылка
		|ИЗ
		|	РегистрСведений.ПланировкаРасписанияTEST КАК ПланировкаРасписанияTEST
		|ГДЕ
		|	ПланировкаРасписанияTEST.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланировкаРасписанияTEST.НомерСтроки";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивДокОбъектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Док = Выборка.ДокументВыходаСсылка.ПолучитьОбъект();  
		МассивДокОбъектов.Добавить(Док);
	КонецЦикла;

	Возврат МассивДокОбъектов
КонецФункции            

&НаСервере
Функция ЗаменитьСимволыДляКлюча(НаименованиеДокумента)
	//Убираем лишние пробелы слева и справа
	НаименованиеДокумента = СокрЛП(НаименованиеДокумента);
	//Заменяем все пробелы внутри строки на "_"
	НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, " ", "_"); 
	//Убираем скобки в отображении времени слева и справа
	НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, "(", ""); 
	НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, ")", "");
	//Заменяем ":" в отображении времени на "_"
	НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, ":", "_");      
	Возврат НаименованиеДокумента;
КонецФункции // ЗаменитьСимволыДляКлюча() 
	
#КонецОбласти

#Область ПолучениеИОбработкаДанных

 &НаКлиенте
Процедура ПолучитьДанныеОпроса(Команда)
	ПолучитьДанныеОпросаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеОпросаНаСервере()
	//Переменная, хранящая путь к JSON-файлу с результатом
	ПутьКРезультату = "D:\AChoir\telegram-poll-voter-extractor\Documents\Results\Polls\" + ИмяПолучаемогоФайла + ".json";
	
	//Создаем COM-объект
	Оболочка = Новый COMОбъект("WScript.Shell");
	
	//Формируем переменные с параметрами запуска
	РабочийКаталог = "D:\AChoir\telegram-poll-voter-extractor\Action";
	ИсполняемыйФайл = "python";
	Скрипт = "start.py"; 
	АргументЗапуска = "--poll_id " + Регистратор.IDОпроса;
	
	//Формируем саму команду запуска
	Команда = СтрШаблон("cmd /c cd /d ""%1"" && %2 %3 %4",
		РабочийКаталог,
		ИсполняемыйФайл,
		Скрипт,
		АргументЗапуска
	);      
	
	//Запускаем процесс
	Попытка
	    Процесс = Оболочка.Exec(Команда);
		Пока Процесс.Status = 0 Цикл
			//Можно продумать отображение загрузки	
		КонецЦикла;	
	Исключение
		ЭтаФорма.РезультатПарсинга = "Ошибка запуска: " + ОписаниеОшибки();
		Возврат
	КонецПопытки;  
	
	//Из созданного скриптом файла формируем поток для чтения и преобразования в структуру
	Попытка
		МассивДанных = ФайлJsonВСтруктуру(ПутьКРезультату);
		СформироватьВыводДанныхВLOG(МассивДанных); 
		МассивДанныхРеквизит = МассивДанных;
	Исключение
		ЭтаФорма.РезультатПарсинга = "Ошибка получения файла: " + ОписаниеОшибки();
	КонецПопытки;	
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьВыводДанныхВLOG(МассивДанных)
	//Процедура форматирует и выводит результат чтения JSON в поле под командой запуска процедуры получения данных
	Попытка
		ТекстДляLog = "";
		Для Каждого СтрокаДанных Из МассивДанных Цикл
			Ключ = СтрокаДанных.Ключ;	     
			Значение = СтрокаДанных.Значение;
			
			Если Ключ = "date" Тогда 
				
				Продолжить
			КонецЕсли;
			
			Если Ключ = "question" Тогда
				
				Продолжить
			КонецЕсли;
			
			Если Значение["voter_counts"] = 0 Тогда
				ВыводимаяСтрока = СтрЗаменить(Ключ, "_", " ") + " - Никто не записался.";
			Иначе
				Пользователи = "";
				Для Каждого Пользователь Из Значение["voter_names"] Цикл 
					Если Пользователи = "" Тогда
						Запятая = "";
					Иначе
						Запятая = ", ";
					КонецЕсли;
					Пользователи = Пользователи + Запятая + Пользователь;
				КонецЦикла;	                              
				ВыводимаяСтрока = СтрЗаменить(Ключ, "_", " ") + ", записаны: " + Пользователи + ".";
			КонецЕсли;
			
			Если ТекстДляLog = "" Тогда
				ПереносСтроки = "";
			Иначе	
				ПереносСтроки = Символы.ПС;
			КонецЕсли;
			
			ТекстДляLog = ТекстДляLog + ПереносСтроки + ВыводимаяСтрока;
		КонецЦикла;
		//Сохраняем в реквизит формы
		ЭтаФорма.РезультатПарсинга = ТекстДляLog;
	Исключение
		ЭтаФорма.РезультатПарсинга = "Ошибка чтения файла: " + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры	

	
#КонецОбласти

#Область ЗагрузкаДанныхВБД

 &НаКлиенте
Процедура ЗагрузитьДанныеВБД(Команда)
	ЗагрузитьДанныеВБДНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВБДНаСервере()
	МассивСлужбДок = ПолучитьМассивСлужбРегистратора();	
	Для Каждого СлужбаДок Из МассивСлужбДок Цикл
		//КлючКСтруктуре = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СокрЛП(СлужбаДок.Наименование), " ", "_"), "(", ""), ")", ""), ":", "_") ;
		НаименованиеДокумента = СлужбаДок.Наименование;
		КлючКСтруктуре = ЗаменитьСимволыДляКлюча(НаименованиеДокумента);
		Попытка
			Запись = МассивДанныхРеквизит[КлючКСтруктуре];
			Если Запись["voter_counts"] = 0 Тогда 
				Продолжить
			КонецЕсли;
				ЗаполнитьТабДок(Запись, СлужбаДок);
		Исключение
			Сообщить("Обратитесь к администратору. Ошибка получения данных по документу """ + СлужбаДок.Наименование + """: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТабДок(Запись, Документ)
	Для Каждого Пользователь Из Запись["voter_names"] Цикл
		Номер1СимволаID = СтрНайти(Пользователь, "ID:", НаправлениеПоиска.СКонца) + 3;
		IDПользователя = Сред(Пользователь, Номер1СимволаID);
		//@skip-check query-in-loop
		Пользователь = ПолучитьПользователяПоID(IDПользователя);
		НоваяСтрокаТЧ = Документ.СписокПользователей.Добавить();
		НоваяСтрокаТЧ.Пользователь = Пользователь;
	КонецЦикла;	
    Документ.Записать();
КонецПроцедуры 


#КонецОбласти

#Область ОстановкаГолосования

  &НаКлиенте
Процедура ОстановитьГолосование(Команда)
	ОстановитьГолосованиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОстановитьГолосованиеНаСервере()
	Ответ = Действие.ОстановитьОпрос(ТокенИнициатора, chat_id, Регистратор.IDСообщения);
	Если Ответ["ok"] Тогда
		РезультатВыполнения = "Голосвание успешно остановлено";
	Иначе
		РезультатВыполнения = СтрШаблон("При попытке остановить голосование%3произошла ошибка.%3Код ошибки: %1.%3Описание ошибки:%3""%2"".", 
										Ответ["error_code"], 
										Ответ["description"],
										Символы.ПС);
	КонецЕсли;	
КонецПроцедуры

	
#КонецОбласти








